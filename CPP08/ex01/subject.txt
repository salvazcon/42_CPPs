Desarrollar una clase Span que pueda almacenar un máximo de N enteros. N es una variable 
unsigned int y será el único parámetro que se pase al constructor.

Esta clase tendrá una función miembro llamada addNumber() para añadir un único número
al Span. Se utilizará para rellenarlo. Cualquier intento de añadir un nuevo elemento si
ya hay N elementos almacenados debería lanzar una excepción.

A continuación, implementa dos funciones miembro: shortestSpan() y longestSpan()
Averiguarán respectivamente el tramo más corto o el tramo más largo (o distancia, si 
lo prefiere) entre todos los números almacenados. entre todos los números almacenados, 
y los devolverán. Si no hay números almacenados o sólo uno, no se puede encontrar ningún
tramo. Por lo tanto, lanza una excepción.

Por supuesto, usted escribirá sus propias pruebas y serán mucho más minuciosas que las 
siguientes.que las de abajo. Pruebe su Span al menos con un mínimo de 10 000 números. Más 
sería aún mejor.

    int main()
    {
        Span sp = Span(5);
        sp.addNumber(6);
        sp.addNumber(3);
        sp.addNumber(17);
        sp.addNumber(9);
        sp.addNumber(11);
        std::cout << sp.shortestSpan() << std::endl;
        std::cout << sp.longestSpan() << std::endl;
        return 0;
    }

output:

    $> ./ex01
    2
    14
    $>

Por último, pero no menos importante, sería maravilloso rellenar tu Span usando un rango de 
iteradores. Hacer miles de llamadas a addNumber() es muy molesto. Implementa una función miembro
para añadir muchos números a tu Span en una sola llamada.

Si no tienes ni idea, estudia los Contenedores. Algunas funciones toman un rango de iteradores 
para añadir una secuencia de elementos al contenedor.