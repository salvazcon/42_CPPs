Es hora de pasar a cosas más serias. Vamos a desarrollar algo raro.

El contenedor std::stack es muy bonito. Desafortunadamente, es uno de los únicos 
contenedores STL que NO es iterable. Es una lástima.

Pero, ¿por qué íbamos a aceptarlo? Especialmente si podemos tomarnos la libertad de destrozar el
pila original para crear características que faltan.

Para reparar esta injusticia, tienes que hacer que el contenedor std::stack sea iterable.

Escribe una clase MutantStack. Se implementará en términos de una pila std::stack.
Ofrecerá todas sus funciones miembro, además de una característica adicional: iteradores.

Por supuesto, escribirás y entregarás tus propias pruebas para asegurarte de que todo funciona 
como se espera.

    int main()
    {
        MutantStack<int> mstack;
        mstack.push(5);
        mstack.push(17);
        std::cout << mstack.top() << std::endl;
        mstack.pop();
        std::cout << mstack.size() << std::endl;
        mstack.push(3);
        mstack.push(5);
        mstack.push(737);
        //[...]
        mstack.push(0);
        MutantStack<int>::iterator it = mstack.begin();
        MutantStack<int>::iterator ite = mstack.end();
        ++it;
        --it;
        while (it != ite)
        {
        std::cout << *it << std::endl;
        ++it;
        }
        std::stack<int> s(mstack);
        return 0;
    }

Si lo ejecutas una primera vez con tu MutantStack, y una segunda vez sustituyendo el
MutantStack con, por ejemplo, un std::list, las dos salidas deberían ser las mismas.
Por supuesto, cuando pruebe otro contenedor, actualice el código con las funciones
(push() puede convertirse en push_back()).