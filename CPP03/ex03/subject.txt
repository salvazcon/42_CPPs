En este ejercicio, crearás un monstruo: una ClapTrap que es mitad FragTrap, mitad ScavTrap. 
Se llamará DiamondTrap y heredará tanto de FragTrap como de ScavTrap. ¡Esto es muy arriesgado!

La clase DiamondTrap tendrá un atributo name private. Dale a este atributo exactamente el mismo 
nombre de variable (no estamos hablando aquí del nombre del robot) que el de la clase base ClapTrap.

Para que quede más claro, aquí tienes dos ejemplos. Si la variable de ClapTrap es name, dar el nombre
name al de DiamondTrap. Si la variable de ClapTrap es _nombre, dale el nombre _nombre a la de DiamondTrap. 
Sus atributos y funciones miembro se escogerán de cualquiera de sus clases padre: 
  
  - Nombre, que se pasa como parámetro a un constructor 
  - ClapTrap::name (parámetro del constructor + sufijo "_clap_name") 
  - Puntos de golpe (FragTrap) 
  - Puntos de energía (ScavTrap) 
  - Daño de ataque (FragTrap) 
  - attack() (Scavtrap)

Además de las funciones especiales de sus dos clases padre, DiamondTrap tendrá su propia capacidad especial:
    void whoAmI(); 
    
Esta función miembro mostrará tanto su nombre como su nombre ClapTrap. 

Por supuesto, el subobjeto ClapTrap del DiamondTrap se creará una vez, y sólo una vez. Sí, hay un truco. 
De nuevo, añade más pruebas a tu programa. 

¿Conoces las opciones del compilador -Wshadow y -Wno-shadow?