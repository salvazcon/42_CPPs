Implementar una clase Weapon que tiene:

    - Un atributo privado tipo, que es una cadena.
    - Una función miembro getType() que devuelve una referencia constante al tipo.
    - Una función miembro setType() que establece el tipo usando el nuevo tipo pasado como parámetro.

Ahora, crea dos clases: HumanoA y HumanoB. Ambas tienen un Arma y un
nombre. También tienen una función miembro attack() que muestra (por supuesto, sin los
paréntesis angulares):

    <nombre> ataca con su <tipo de arma>

El HumanoA y el HumanoB son casi iguales excepto por estos dos pequeños detalles:

    - Mientras que HumanA toma el Arma en su constructor, HumanB no.
    - El HumanoB puede no tener siempre un Arma, mientras que el HumanoA siempre estará armado.

Si su implementación es correcta, al ejecutar el siguiente código se imprimirá un ataque
con un "garrote con púas" y un segundo ataque con "otro tipo de garrote" para ambos casos de prueba.
casos de prueba:

---------------------------------------------------------
    int main()
    {
        {
            Weapon club = Weapon("crude spiked club");

            HumanA bob("Bob", club);
            bob.attack();
            club.setType("some other type of club");
            bob.attack();
        }
        {
            Weapon club = Weapon("crude spiked club");
            HumanB jim("Jim");
            jim.setWeapon(club);
            jim.attack();
            club.setType("some other type of club");
            jim.attack();
        }
        return 0;
    }
---------------------------------------------------------

No olvides comprobar si hay fugas de memoria.

    ¿En qué caso crees que sería mejor utilizar un puntero a
    Arma? ¿Y una referencia a Arma? ¿Por qué? Piénsalo antes de
    empezar este ejercicio.

